---
title: 'R Course: basic syntax'
subtitle: "Session 1"
author: "Yujia Luo"
date: "22-11-2021"
output:
  html_document: default
---
\fontsize{14}{22}

## 1. Set working directory

You always need to set working directory when you start RStudio: **Session** -> **Set working directory** -> **Choose directory**. The working directory is a default place to look for files (i.e., excel, txt, csv files) which contain your experimental data.

Another option to set working directory: 
```{r}
setwd("C:/Users/...") 

# Check the current directory
getwd()
```

## 2. R basic objects

In R, everything is an object. The basic objects in R: vector, factor, matrix, list, data.frame, function. 

To assign values to an object:  
- The assignment operator **<-** points to the object receiving the value of the expression  
- Often the = operator can be used (but not always)  


## 2.1 Vector  
Vector is an ordered collection of data of the **same** type. To create a vector, function **c()** is used.
```{r}
vector1 <- c(1,21,5,6)
vector1
class(vector1)

vector2 <- c("1","21","5","6")
vector2
class(vector2)

vector3 <- c("a","b","c") # a wrong example: vector4 <- c(a, b, c)
vector3
class(vector3)
```

copy part of a vector into a new vector
```{r}
a <- c(1:10)
a
b <- a[1:3]
b
c <- a^2
c
```

Several functions to create vectors
```{r}
x <- 1:10
assign("x", 1:10)
x <- seq(1, 10, by = 1)
x <- seq(length = 10, from = 1, by = 1)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
```

Several functions exist to obtain information about vectors:  
```{r echo=TRUE}
vector1 <- c(1,21,5,6)
class(vector1)
length(vector1)
min(vector1)
max(vector1)
sum(vector1)
mean(vector1)
sd(vector1)
```

## 2.2 Factor

A factor is an efficient way to store **character** data where elements are repeated.  

```{r}
x1 <- c("10", "50", "100", "10", "50", "100", "10", "100")
x1
class(x1)

x2 <- as.factor(x1)
class(x2)
x2

levels(x2) <- c("low", "mid", "high")
x2
```

## 2.3 Matrix

A matrix:  
- Has two dimensions: rows and columns  
- Can only contain data of **one** type, numeric or character  
- Function **matrix()** 

```{r}
matrix1 <- matrix(1:10, nrow = 2, ncol = 5)
matrix1
```

Elements in a matrix as matrix[x,y]:
```{r}
# Elements in the first column
matrix1[,1]
# Elements in the first row
matrix1[1,]
# Elements in the position
matrix1[1,1]
```

Exercise:
create a 10x10 matrix which contains numbers 1 to 100 and fill the matrix by row. If you don't know how to fill the elements by row, type **?matrix** in console.

## 2.4 List

A list  
- is an ordered collection of objects  
- The components of a list can be of **any** class  

```{r}
record <- list(name = "Fred", spouse = "Mary", 
               no.children = 3, child.ages = c(4,7, 9))
record
class(record)
```

The **$** operator
```{r}
record$name
class(record$name)
```

## 2.5 Data.frame

A data.frame  
- is a matrix where the columns can be of **different** classes numeric, character, factor, . . .  
- The **[ ]** operators are used as in a matrix  
- Columns in a data.frame can be accessed with the **$** operator  
```{r}
vector <- c("a", "a", "c", "d")
vector
matrix <- matrix(1:20, nrow = 4, ncol = 5)
matrix
df <- data.frame(vector, matrix)
df
class(df)
```

Experimental data is a data.frame:
```{r}
SampleID <- c(1:4)
Treatment <- c("control", "T1", "T2","T3")
pH <- c(7.0,7.5,6.9,8.0)
TN <- c(20, 30, 25, 15)
df <- data.frame(SampleID, Treatment, pH, TN)
df
```

We can also create our experimental data in spreadsheets, and import to RStudio. There are several tips when preparing the experimental data:  
- Usually the first row is the header, and the first column is the sample ID  
- Avoid blank spaces: replace **Sample ID** to **SampleID**, **Sample.ID**, or **Sample_ID**  
- Avoid using names that contain symbols such as ?, $, %, ^, &, *, (, ), -, #  
- Missing values are filled with **NA**  

Import data from an excel file (xlsx):
```{r}
#install.packages(readxl)
library(readxl)
Exp <- read_excel("Data.xlsx")
```
Use function **head()** and **summary()** to view your data set.
```{r}
head(Exp)
summary(Exp)
```
Change the name of the columns
```{r}
colnames(Exp)[2] <- "NewName"
```

Import data from a comma delimited text file (csv):  
df <- read.csv(file = "Data.csv", header = T, sep = ",", dec = ".", ...)  

Import data from a text file (txt):  
df <- read.table(file = "Data.csv", header = T, sep = "", dec = ".", ...)  

## 2.6 Function

- Functions are the tools in R  
- Every action is performed by calling a function, we have used several already  
- A function is also an object  
- Functions can have arguments within the parentheses: **functionName(argument1, argument2, argument3, ...)**  
- You can write your own functions in order to make repetitive operations  

```{r}
# convert 20 Celsius into Kelvin
20+273.15

temp <- function(temp_c) {
  temp_k <- temp_c + 273.15
  return(temp_k)
}

temp(20)
temp(100)

```

